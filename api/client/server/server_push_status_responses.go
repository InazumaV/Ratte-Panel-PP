// Code generated by go-swagger; DO NOT EDIT.

package server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"Ratte-Panel-PP/api/models"
)

// ServerPushStatusReader is a Reader for the ServerPushStatus structure.
type ServerPushStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ServerPushStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewServerPushStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("[POST /v1/server/status] ServerPushStatus", response, response.Code())
	}
}

// NewServerPushStatusOK creates a ServerPushStatusOK with default headers values
func NewServerPushStatusOK() *ServerPushStatusOK {
	return &ServerPushStatusOK{}
}

/*
ServerPushStatusOK describes a response with status code 200, with default header values.

A successful response.
*/
type ServerPushStatusOK struct {
	Payload *ServerPushStatusOKBody
}

// IsSuccess returns true when this server push status o k response has a 2xx status code
func (o *ServerPushStatusOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this server push status o k response has a 3xx status code
func (o *ServerPushStatusOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this server push status o k response has a 4xx status code
func (o *ServerPushStatusOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this server push status o k response has a 5xx status code
func (o *ServerPushStatusOK) IsServerError() bool {
	return false
}

// IsCode returns true when this server push status o k response a status code equal to that given
func (o *ServerPushStatusOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the server push status o k response
func (o *ServerPushStatusOK) Code() int {
	return 200
}

func (o *ServerPushStatusOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/server/status][%d] serverPushStatusOK %s", 200, payload)
}

func (o *ServerPushStatusOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/server/status][%d] serverPushStatusOK %s", 200, payload)
}

func (o *ServerPushStatusOK) GetPayload() *ServerPushStatusOKBody {
	return o.Payload
}

func (o *ServerPushStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ServerPushStatusOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
ServerPushStatusOKBody server push status o k body
swagger:model ServerPushStatusOKBody
*/
type ServerPushStatusOKBody struct {
	models.Response

	// data
	Data interface{} `json:"data,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ServerPushStatusOKBody) UnmarshalJSON(raw []byte) error {
	// ServerPushStatusOKBodyAO0
	var serverPushStatusOKBodyAO0 models.Response
	if err := swag.ReadJSON(raw, &serverPushStatusOKBodyAO0); err != nil {
		return err
	}
	o.Response = serverPushStatusOKBodyAO0

	// ServerPushStatusOKBodyAO1
	var dataServerPushStatusOKBodyAO1 struct {
		Data interface{} `json:"data,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataServerPushStatusOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataServerPushStatusOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ServerPushStatusOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	serverPushStatusOKBodyAO0, err := swag.WriteJSON(o.Response)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, serverPushStatusOKBodyAO0)
	var dataServerPushStatusOKBodyAO1 struct {
		Data interface{} `json:"data,omitempty"`
	}

	dataServerPushStatusOKBodyAO1.Data = o.Data

	jsonDataServerPushStatusOKBodyAO1, errServerPushStatusOKBodyAO1 := swag.WriteJSON(dataServerPushStatusOKBodyAO1)
	if errServerPushStatusOKBodyAO1 != nil {
		return nil, errServerPushStatusOKBodyAO1
	}
	_parts = append(_parts, jsonDataServerPushStatusOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this server push status o k body
func (o *ServerPushStatusOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Response
	if err := o.Response.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this server push status o k body based on the context it is used
func (o *ServerPushStatusOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Response
	if err := o.Response.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *ServerPushStatusOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServerPushStatusOKBody) UnmarshalBinary(b []byte) error {
	var res ServerPushStatusOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
