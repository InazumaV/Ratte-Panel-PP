// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TelegramConfig TelegramConfig
//
// swagger:model TelegramConfig
type TelegramConfig struct {

	// telegram bot token
	// Required: true
	TelegramBotToken *string `json:"telegram_bot_token"`

	// telegram group url
	// Required: true
	TelegramGroupURL *string `json:"telegram_group_url"`

	// telegram notify
	// Required: true
	TelegramNotify bool `json:"telegram_notify"`

	// telegram web hook domain
	// Required: true
	TelegramWebHookDomain *string `json:"telegram_web_hook_domain"`
}

// Validate validates this telegram config
func (m *TelegramConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTelegramBotToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTelegramGroupURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTelegramNotify(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTelegramWebHookDomain(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TelegramConfig) validateTelegramBotToken(formats strfmt.Registry) error {

	if err := validate.Required("telegram_bot_token", "body", m.TelegramBotToken); err != nil {
		return err
	}

	return nil
}

func (m *TelegramConfig) validateTelegramGroupURL(formats strfmt.Registry) error {

	if err := validate.Required("telegram_group_url", "body", m.TelegramGroupURL); err != nil {
		return err
	}

	return nil
}

func (m *TelegramConfig) validateTelegramNotify(formats strfmt.Registry) error {

	if err := validate.Required("telegram_notify", "body", bool(m.TelegramNotify)); err != nil {
		return err
	}

	return nil
}

func (m *TelegramConfig) validateTelegramWebHookDomain(formats strfmt.Registry) error {

	if err := validate.Required("telegram_web_hook_domain", "body", m.TelegramWebHookDomain); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this telegram config based on context it is used
func (m *TelegramConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TelegramConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TelegramConfig) UnmarshalBinary(b []byte) error {
	var res TelegramConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
