// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Coupon Coupon
//
// swagger:model Coupon
type Coupon struct {

	// code
	// Required: true
	Code *string `json:"code"`

	// count
	// Required: true
	Count *int64 `json:"count"`

	// created at
	// Required: true
	CreatedAt *int64 `json:"created_at"`

	// discount
	// Required: true
	Discount *int64 `json:"discount"`

	// enable
	// Required: true
	Enable bool `json:"enable"`

	// expire time
	// Required: true
	ExpireTime *int64 `json:"expire_time"`

	// id
	// Required: true
	ID *int64 `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`

	// start time
	// Required: true
	StartTime *int64 `json:"start_time"`

	// subscribe
	// Required: true
	Subscribe []int64 `json:"subscribe"`

	// type
	// Required: true
	Type *uint8 `json:"type"`

	// updated at
	// Required: true
	UpdatedAt *int64 `json:"updated_at"`

	// used count
	// Required: true
	UsedCount *int64 `json:"used_count"`

	// user limit
	// Required: true
	UserLimit *int64 `json:"user_limit"`
}

// Validate validates this coupon
func (m *Coupon) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiscount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpireTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscribe(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsedCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserLimit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Coupon) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	return nil
}

func (m *Coupon) validateCount(formats strfmt.Registry) error {

	if err := validate.Required("count", "body", m.Count); err != nil {
		return err
	}

	return nil
}

func (m *Coupon) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *Coupon) validateDiscount(formats strfmt.Registry) error {

	if err := validate.Required("discount", "body", m.Discount); err != nil {
		return err
	}

	return nil
}

func (m *Coupon) validateEnable(formats strfmt.Registry) error {

	if err := validate.Required("enable", "body", bool(m.Enable)); err != nil {
		return err
	}

	return nil
}

func (m *Coupon) validateExpireTime(formats strfmt.Registry) error {

	if err := validate.Required("expire_time", "body", m.ExpireTime); err != nil {
		return err
	}

	return nil
}

func (m *Coupon) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Coupon) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Coupon) validateStartTime(formats strfmt.Registry) error {

	if err := validate.Required("start_time", "body", m.StartTime); err != nil {
		return err
	}

	return nil
}

func (m *Coupon) validateSubscribe(formats strfmt.Registry) error {

	if err := validate.Required("subscribe", "body", m.Subscribe); err != nil {
		return err
	}

	return nil
}

func (m *Coupon) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *Coupon) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

func (m *Coupon) validateUsedCount(formats strfmt.Registry) error {

	if err := validate.Required("used_count", "body", m.UsedCount); err != nil {
		return err
	}

	return nil
}

func (m *Coupon) validateUserLimit(formats strfmt.Registry) error {

	if err := validate.Required("user_limit", "body", m.UserLimit); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this coupon based on context it is used
func (m *Coupon) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Coupon) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Coupon) UnmarshalBinary(b []byte) error {
	var res Coupon
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
