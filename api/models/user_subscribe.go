// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserSubscribe UserSubscribe
//
// swagger:model UserSubscribe
type UserSubscribe struct {

	// created at
	// Required: true
	CreatedAt *int64 `json:"created_at"`

	// download
	// Required: true
	Download *int64 `json:"download"`

	// expire time
	// Required: true
	ExpireTime *int64 `json:"expire_time"`

	// finished at
	// Required: true
	FinishedAt *int64 `json:"finished_at"`

	// id
	// Required: true
	ID *int64 `json:"id"`

	// order id
	// Required: true
	OrderID *int64 `json:"order_id"`

	// reset time
	// Required: true
	ResetTime *int64 `json:"reset_time"`

	// start time
	// Required: true
	StartTime *int64 `json:"start_time"`

	// status
	// Required: true
	Status *uint8 `json:"status"`

	// subscribe
	// Required: true
	Subscribe *Subscribe `json:"subscribe"`

	// subscribe id
	// Required: true
	SubscribeID *int64 `json:"subscribe_id"`

	// token
	// Required: true
	Token *string `json:"token"`

	// traffic
	// Required: true
	Traffic *int64 `json:"traffic"`

	// updated at
	// Required: true
	UpdatedAt *int64 `json:"updated_at"`

	// upload
	// Required: true
	Upload *int64 `json:"upload"`

	// user id
	// Required: true
	UserID *int64 `json:"user_id"`
}

// Validate validates this user subscribe
func (m *UserSubscribe) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDownload(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpireTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFinishedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResetTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscribe(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscribeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTraffic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpload(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserSubscribe) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *UserSubscribe) validateDownload(formats strfmt.Registry) error {

	if err := validate.Required("download", "body", m.Download); err != nil {
		return err
	}

	return nil
}

func (m *UserSubscribe) validateExpireTime(formats strfmt.Registry) error {

	if err := validate.Required("expire_time", "body", m.ExpireTime); err != nil {
		return err
	}

	return nil
}

func (m *UserSubscribe) validateFinishedAt(formats strfmt.Registry) error {

	if err := validate.Required("finished_at", "body", m.FinishedAt); err != nil {
		return err
	}

	return nil
}

func (m *UserSubscribe) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *UserSubscribe) validateOrderID(formats strfmt.Registry) error {

	if err := validate.Required("order_id", "body", m.OrderID); err != nil {
		return err
	}

	return nil
}

func (m *UserSubscribe) validateResetTime(formats strfmt.Registry) error {

	if err := validate.Required("reset_time", "body", m.ResetTime); err != nil {
		return err
	}

	return nil
}

func (m *UserSubscribe) validateStartTime(formats strfmt.Registry) error {

	if err := validate.Required("start_time", "body", m.StartTime); err != nil {
		return err
	}

	return nil
}

func (m *UserSubscribe) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *UserSubscribe) validateSubscribe(formats strfmt.Registry) error {

	if err := validate.Required("subscribe", "body", m.Subscribe); err != nil {
		return err
	}

	if m.Subscribe != nil {
		if err := m.Subscribe.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subscribe")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subscribe")
			}
			return err
		}
	}

	return nil
}

func (m *UserSubscribe) validateSubscribeID(formats strfmt.Registry) error {

	if err := validate.Required("subscribe_id", "body", m.SubscribeID); err != nil {
		return err
	}

	return nil
}

func (m *UserSubscribe) validateToken(formats strfmt.Registry) error {

	if err := validate.Required("token", "body", m.Token); err != nil {
		return err
	}

	return nil
}

func (m *UserSubscribe) validateTraffic(formats strfmt.Registry) error {

	if err := validate.Required("traffic", "body", m.Traffic); err != nil {
		return err
	}

	return nil
}

func (m *UserSubscribe) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

func (m *UserSubscribe) validateUpload(formats strfmt.Registry) error {

	if err := validate.Required("upload", "body", m.Upload); err != nil {
		return err
	}

	return nil
}

func (m *UserSubscribe) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("user_id", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this user subscribe based on the context it is used
func (m *UserSubscribe) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSubscribe(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserSubscribe) contextValidateSubscribe(ctx context.Context, formats strfmt.Registry) error {

	if m.Subscribe != nil {

		if err := m.Subscribe.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subscribe")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subscribe")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserSubscribe) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserSubscribe) UnmarshalBinary(b []byte) error {
	var res UserSubscribe
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
