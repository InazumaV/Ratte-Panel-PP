// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserAuthMethod UserAuthMethod
//
// swagger:model UserAuthMethod
type UserAuthMethod struct {

	// auth identifier
	// Required: true
	AuthIdentifier *string `json:"auth_identifier"`

	// auth type
	// Required: true
	AuthType *string `json:"auth_type"`

	// verified
	// Required: true
	Verified bool `json:"verified"`
}

// Validate validates this user auth method
func (m *UserAuthMethod) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerified(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserAuthMethod) validateAuthIdentifier(formats strfmt.Registry) error {

	if err := validate.Required("auth_identifier", "body", m.AuthIdentifier); err != nil {
		return err
	}

	return nil
}

func (m *UserAuthMethod) validateAuthType(formats strfmt.Registry) error {

	if err := validate.Required("auth_type", "body", m.AuthType); err != nil {
		return err
	}

	return nil
}

func (m *UserAuthMethod) validateVerified(formats strfmt.Registry) error {

	if err := validate.Required("verified", "body", bool(m.Verified)); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this user auth method based on context it is used
func (m *UserAuthMethod) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UserAuthMethod) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserAuthMethod) UnmarshalBinary(b []byte) error {
	var res UserAuthMethod
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
