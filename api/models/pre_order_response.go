// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PreOrderResponse PreOrderResponse
//
// swagger:model PreOrderResponse
type PreOrderResponse struct {

	// amount
	// Required: true
	Amount *int64 `json:"amount"`

	// coupon
	// Required: true
	Coupon *string `json:"coupon"`

	// coupon discount
	// Required: true
	CouponDiscount *int64 `json:"coupon_discount"`

	// discount
	// Required: true
	Discount *int64 `json:"discount"`

	// fee amount
	// Required: true
	FeeAmount *int64 `json:"fee_amount"`

	// gift amount
	// Required: true
	GiftAmount *int64 `json:"gift_amount"`

	// price
	// Required: true
	Price *int64 `json:"price"`
}

// Validate validates this pre order response
func (m *PreOrderResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCoupon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCouponDiscount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiscount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGiftAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PreOrderResponse) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	return nil
}

func (m *PreOrderResponse) validateCoupon(formats strfmt.Registry) error {

	if err := validate.Required("coupon", "body", m.Coupon); err != nil {
		return err
	}

	return nil
}

func (m *PreOrderResponse) validateCouponDiscount(formats strfmt.Registry) error {

	if err := validate.Required("coupon_discount", "body", m.CouponDiscount); err != nil {
		return err
	}

	return nil
}

func (m *PreOrderResponse) validateDiscount(formats strfmt.Registry) error {

	if err := validate.Required("discount", "body", m.Discount); err != nil {
		return err
	}

	return nil
}

func (m *PreOrderResponse) validateFeeAmount(formats strfmt.Registry) error {

	if err := validate.Required("fee_amount", "body", m.FeeAmount); err != nil {
		return err
	}

	return nil
}

func (m *PreOrderResponse) validateGiftAmount(formats strfmt.Registry) error {

	if err := validate.Required("gift_amount", "body", m.GiftAmount); err != nil {
		return err
	}

	return nil
}

func (m *PreOrderResponse) validatePrice(formats strfmt.Registry) error {

	if err := validate.Required("price", "body", m.Price); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this pre order response based on context it is used
func (m *PreOrderResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PreOrderResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PreOrderResponse) UnmarshalBinary(b []byte) error {
	var res PreOrderResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
