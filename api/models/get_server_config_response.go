// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetServerConfigResponse GetServerConfigResponse
//
// swagger:model GetServerConfigResponse
type GetServerConfigResponse struct {

	// basic
	// Required: true
	Basic *ServerBasic `json:"basic"`

	// config
	// Required: true
	Config json.RawMessage `json:"config"`

	// protocol
	// Required: true
	Protocol *string `json:"protocol"`
}

// Validate validates this get server config response
func (m *GetServerConfigResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBasic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetServerConfigResponse) validateBasic(formats strfmt.Registry) error {

	if err := validate.Required("basic", "body", m.Basic); err != nil {
		return err
	}

	if m.Basic != nil {
		if err := m.Basic.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("basic")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("basic")
			}
			return err
		}
	}

	return nil
}

func (m *GetServerConfigResponse) validateConfig(formats strfmt.Registry) error {

	if m.Config == nil {
		return errors.Required("config", "body", nil)
	}

	return nil
}

func (m *GetServerConfigResponse) validateProtocol(formats strfmt.Registry) error {

	if err := validate.Required("protocol", "body", m.Protocol); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get server config response based on the context it is used
func (m *GetServerConfigResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBasic(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetServerConfigResponse) contextValidateBasic(ctx context.Context, formats strfmt.Registry) error {

	if m.Basic != nil {

		if err := m.Basic.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("basic")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("basic")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetServerConfigResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetServerConfigResponse) UnmarshalBinary(b []byte) error {
	var res GetServerConfigResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
