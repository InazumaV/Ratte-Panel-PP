// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServerPushStatusRequest ServerPushStatusRequest
//
// swagger:model ServerPushStatusRequest
type ServerPushStatusRequest struct {

	// cpu
	// Required: true
	CPU *float64 `json:"cpu"`

	// disk
	// Required: true
	Disk *float64 `json:"disk"`

	// mem
	// Required: true
	Mem *float64 `json:"mem"`

	// updated at
	// Required: true
	UpdatedAt *int64 `json:"updated_at"`
}

// Validate validates this server push status request
func (m *ServerPushStatusRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCPU(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServerPushStatusRequest) validateCPU(formats strfmt.Registry) error {

	if err := validate.Required("cpu", "body", m.CPU); err != nil {
		return err
	}

	return nil
}

func (m *ServerPushStatusRequest) validateDisk(formats strfmt.Registry) error {

	if err := validate.Required("disk", "body", m.Disk); err != nil {
		return err
	}

	return nil
}

func (m *ServerPushStatusRequest) validateMem(formats strfmt.Registry) error {

	if err := validate.Required("mem", "body", m.Mem); err != nil {
		return err
	}

	return nil
}

func (m *ServerPushStatusRequest) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this server push status request based on context it is used
func (m *ServerPushStatusRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ServerPushStatusRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServerPushStatusRequest) UnmarshalBinary(b []byte) error {
	var res ServerPushStatusRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
