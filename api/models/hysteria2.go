// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Hysteria2 Hysteria2
//
// swagger:model Hysteria2
type Hysteria2 struct {

	// hop interval
	// Required: true
	HopInterval *int32 `json:"hop_interval"`

	// hop ports
	// Required: true
	HopPorts *string `json:"hop_ports"`

	// obfs password
	// Required: true
	ObfsPassword *string `json:"obfs_password"`

	// port
	// Required: true
	Port *int32 `json:"port"`

	// security config
	// Required: true
	SecurityConfig *SecurityConfig `json:"security_config"`
}

// Validate validates this hysteria2
func (m *Hysteria2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHopInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHopPorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObfsPassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Hysteria2) validateHopInterval(formats strfmt.Registry) error {

	if err := validate.Required("hop_interval", "body", m.HopInterval); err != nil {
		return err
	}

	return nil
}

func (m *Hysteria2) validateHopPorts(formats strfmt.Registry) error {

	if err := validate.Required("hop_ports", "body", m.HopPorts); err != nil {
		return err
	}

	return nil
}

func (m *Hysteria2) validateObfsPassword(formats strfmt.Registry) error {

	if err := validate.Required("obfs_password", "body", m.ObfsPassword); err != nil {
		return err
	}

	return nil
}

func (m *Hysteria2) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("port", "body", m.Port); err != nil {
		return err
	}

	return nil
}

func (m *Hysteria2) validateSecurityConfig(formats strfmt.Registry) error {

	if err := validate.Required("security_config", "body", m.SecurityConfig); err != nil {
		return err
	}

	if m.SecurityConfig != nil {
		if err := m.SecurityConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("security_config")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this hysteria2 based on the context it is used
func (m *Hysteria2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSecurityConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Hysteria2) contextValidateSecurityConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.SecurityConfig != nil {

		if err := m.SecurityConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("security_config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Hysteria2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Hysteria2) UnmarshalBinary(b []byte) error {
	var res Hysteria2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
