// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuthConfig AuthConfig
//
// swagger:model AuthConfig
type AuthConfig struct {

	// email
	// Required: true
	Email *EmailAuthticateConfig `json:"email"`

	// mobile
	// Required: true
	Mobile *MobileAuthenticateConfig `json:"mobile"`

	// register
	// Required: true
	Register *PubilcRegisterConfig `json:"register"`
}

// Validate validates this auth config
func (m *AuthConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMobile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegister(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthConfig) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	if m.Email != nil {
		if err := m.Email.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("email")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("email")
			}
			return err
		}
	}

	return nil
}

func (m *AuthConfig) validateMobile(formats strfmt.Registry) error {

	if err := validate.Required("mobile", "body", m.Mobile); err != nil {
		return err
	}

	if m.Mobile != nil {
		if err := m.Mobile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mobile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mobile")
			}
			return err
		}
	}

	return nil
}

func (m *AuthConfig) validateRegister(formats strfmt.Registry) error {

	if err := validate.Required("register", "body", m.Register); err != nil {
		return err
	}

	if m.Register != nil {
		if err := m.Register.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("register")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("register")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this auth config based on the context it is used
func (m *AuthConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEmail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMobile(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegister(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthConfig) contextValidateEmail(ctx context.Context, formats strfmt.Registry) error {

	if m.Email != nil {

		if err := m.Email.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("email")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("email")
			}
			return err
		}
	}

	return nil
}

func (m *AuthConfig) contextValidateMobile(ctx context.Context, formats strfmt.Registry) error {

	if m.Mobile != nil {

		if err := m.Mobile.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mobile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mobile")
			}
			return err
		}
	}

	return nil
}

func (m *AuthConfig) contextValidateRegister(ctx context.Context, formats strfmt.Registry) error {

	if m.Register != nil {

		if err := m.Register.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("register")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("register")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuthConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuthConfig) UnmarshalBinary(b []byte) error {
	var res AuthConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
