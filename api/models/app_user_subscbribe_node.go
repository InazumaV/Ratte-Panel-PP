// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AppUserSubscbribeNode AppUserSubscbribeNode
//
// swagger:model AppUserSubscbribeNode
type AppUserSubscbribeNode struct {

	// city
	// Required: true
	City *string `json:"city"`

	// config
	// Required: true
	Config *string `json:"config"`

	// country
	// Required: true
	Country *string `json:"country"`

	// created at
	// Required: true
	CreatedAt *int64 `json:"created_at"`

	// download
	// Required: true
	Download *int64 `json:"download"`

	// id
	// Required: true
	ID *int64 `json:"id"`

	// latitude
	// Required: true
	Latitude *string `json:"latitude"`

	// longitude
	// Required: true
	Longitude *string `json:"longitude"`

	// name
	// Required: true
	Name *string `json:"name"`

	// protocol
	// Required: true
	Protocol *string `json:"protocol"`

	// relay mode
	// Required: true
	RelayMode *string `json:"relay_mode"`

	// relay node
	// Required: true
	RelayNode *string `json:"relay_node"`

	// server addr
	// Required: true
	ServerAddr *string `json:"server_addr"`

	// speed limit
	// Required: true
	SpeedLimit *int32 `json:"speed_limit"`

	// tags
	// Required: true
	Tags []string `json:"tags"`

	// traffic
	// Required: true
	Traffic *int64 `json:"traffic"`

	// traffic ratio
	// Required: true
	TrafficRatio *float64 `json:"traffic_ratio"`

	// upload
	// Required: true
	Upload *int64 `json:"upload"`

	// uuid
	// Required: true
	UUID *string `json:"uuid"`
}

// Validate validates this app user subscbribe node
func (m *AppUserSubscbribeNode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDownload(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLatitude(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLongitude(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelayMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelayNode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerAddr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpeedLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTraffic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrafficRatio(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpload(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppUserSubscbribeNode) validateCity(formats strfmt.Registry) error {

	if err := validate.Required("city", "body", m.City); err != nil {
		return err
	}

	return nil
}

func (m *AppUserSubscbribeNode) validateConfig(formats strfmt.Registry) error {

	if err := validate.Required("config", "body", m.Config); err != nil {
		return err
	}

	return nil
}

func (m *AppUserSubscbribeNode) validateCountry(formats strfmt.Registry) error {

	if err := validate.Required("country", "body", m.Country); err != nil {
		return err
	}

	return nil
}

func (m *AppUserSubscbribeNode) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *AppUserSubscbribeNode) validateDownload(formats strfmt.Registry) error {

	if err := validate.Required("download", "body", m.Download); err != nil {
		return err
	}

	return nil
}

func (m *AppUserSubscbribeNode) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *AppUserSubscbribeNode) validateLatitude(formats strfmt.Registry) error {

	if err := validate.Required("latitude", "body", m.Latitude); err != nil {
		return err
	}

	return nil
}

func (m *AppUserSubscbribeNode) validateLongitude(formats strfmt.Registry) error {

	if err := validate.Required("longitude", "body", m.Longitude); err != nil {
		return err
	}

	return nil
}

func (m *AppUserSubscbribeNode) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *AppUserSubscbribeNode) validateProtocol(formats strfmt.Registry) error {

	if err := validate.Required("protocol", "body", m.Protocol); err != nil {
		return err
	}

	return nil
}

func (m *AppUserSubscbribeNode) validateRelayMode(formats strfmt.Registry) error {

	if err := validate.Required("relay_mode", "body", m.RelayMode); err != nil {
		return err
	}

	return nil
}

func (m *AppUserSubscbribeNode) validateRelayNode(formats strfmt.Registry) error {

	if err := validate.Required("relay_node", "body", m.RelayNode); err != nil {
		return err
	}

	return nil
}

func (m *AppUserSubscbribeNode) validateServerAddr(formats strfmt.Registry) error {

	if err := validate.Required("server_addr", "body", m.ServerAddr); err != nil {
		return err
	}

	return nil
}

func (m *AppUserSubscbribeNode) validateSpeedLimit(formats strfmt.Registry) error {

	if err := validate.Required("speed_limit", "body", m.SpeedLimit); err != nil {
		return err
	}

	return nil
}

func (m *AppUserSubscbribeNode) validateTags(formats strfmt.Registry) error {

	if err := validate.Required("tags", "body", m.Tags); err != nil {
		return err
	}

	return nil
}

func (m *AppUserSubscbribeNode) validateTraffic(formats strfmt.Registry) error {

	if err := validate.Required("traffic", "body", m.Traffic); err != nil {
		return err
	}

	return nil
}

func (m *AppUserSubscbribeNode) validateTrafficRatio(formats strfmt.Registry) error {

	if err := validate.Required("traffic_ratio", "body", m.TrafficRatio); err != nil {
		return err
	}

	return nil
}

func (m *AppUserSubscbribeNode) validateUpload(formats strfmt.Registry) error {

	if err := validate.Required("upload", "body", m.Upload); err != nil {
		return err
	}

	return nil
}

func (m *AppUserSubscbribeNode) validateUUID(formats strfmt.Registry) error {

	if err := validate.Required("uuid", "body", m.UUID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this app user subscbribe node based on context it is used
func (m *AppUserSubscbribeNode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AppUserSubscbribeNode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AppUserSubscbribeNode) UnmarshalBinary(b []byte) error {
	var res AppUserSubscbribeNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
