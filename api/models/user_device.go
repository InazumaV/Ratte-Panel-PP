// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserDevice UserDevice
//
// swagger:model UserDevice
type UserDevice struct {

	// created at
	// Required: true
	CreatedAt *int64 `json:"created_at"`

	// enabled
	// Required: true
	Enabled bool `json:"enabled"`

	// id
	// Required: true
	ID *int64 `json:"id"`

	// identifier
	// Required: true
	Identifier *string `json:"identifier"`

	// ip
	// Required: true
	IP *string `json:"ip"`

	// online
	// Required: true
	Online bool `json:"online"`

	// updated at
	// Required: true
	UpdatedAt *int64 `json:"updated_at"`

	// user agent
	// Required: true
	UserAgent *string `json:"user_agent"`
}

// Validate validates this user device
func (m *UserDevice) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnline(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserAgent(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserDevice) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *UserDevice) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", bool(m.Enabled)); err != nil {
		return err
	}

	return nil
}

func (m *UserDevice) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *UserDevice) validateIdentifier(formats strfmt.Registry) error {

	if err := validate.Required("identifier", "body", m.Identifier); err != nil {
		return err
	}

	return nil
}

func (m *UserDevice) validateIP(formats strfmt.Registry) error {

	if err := validate.Required("ip", "body", m.IP); err != nil {
		return err
	}

	return nil
}

func (m *UserDevice) validateOnline(formats strfmt.Registry) error {

	if err := validate.Required("online", "body", bool(m.Online)); err != nil {
		return err
	}

	return nil
}

func (m *UserDevice) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

func (m *UserDevice) validateUserAgent(formats strfmt.Registry) error {

	if err := validate.Required("user_agent", "body", m.UserAgent); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this user device based on context it is used
func (m *UserDevice) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UserDevice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserDevice) UnmarshalBinary(b []byte) error {
	var res UserDevice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
