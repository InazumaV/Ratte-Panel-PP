// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SubscribeConfig SubscribeConfig
//
// swagger:model SubscribeConfig
type SubscribeConfig struct {

	// pan domain
	// Required: true
	PanDomain bool `json:"pan_domain"`

	// single model
	// Required: true
	SingleModel bool `json:"single_model"`

	// subscribe domain
	// Required: true
	SubscribeDomain *string `json:"subscribe_domain"`

	// subscribe path
	// Required: true
	SubscribePath *string `json:"subscribe_path"`
}

// Validate validates this subscribe config
func (m *SubscribeConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePanDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSingleModel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscribeDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscribePath(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SubscribeConfig) validatePanDomain(formats strfmt.Registry) error {

	if err := validate.Required("pan_domain", "body", bool(m.PanDomain)); err != nil {
		return err
	}

	return nil
}

func (m *SubscribeConfig) validateSingleModel(formats strfmt.Registry) error {

	if err := validate.Required("single_model", "body", bool(m.SingleModel)); err != nil {
		return err
	}

	return nil
}

func (m *SubscribeConfig) validateSubscribeDomain(formats strfmt.Registry) error {

	if err := validate.Required("subscribe_domain", "body", m.SubscribeDomain); err != nil {
		return err
	}

	return nil
}

func (m *SubscribeConfig) validateSubscribePath(formats strfmt.Registry) error {

	if err := validate.Required("subscribe_path", "body", m.SubscribePath); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this subscribe config based on context it is used
func (m *SubscribeConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SubscribeConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SubscribeConfig) UnmarshalBinary(b []byte) error {
	var res SubscribeConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
