// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ApplicationConfig ApplicationConfig
//
// swagger:model ApplicationConfig
type ApplicationConfig struct {

	// app id
	// Required: true
	AppID *int64 `json:"app_id"`

	// domains
	// Required: true
	Domains []string `json:"domains"`

	// encryption key
	// Required: true
	EncryptionKey *string `json:"encryption_key"`

	// encryption method
	// Required: true
	EncryptionMethod *string `json:"encryption_method"`

	// startup picture
	// Required: true
	StartupPicture *string `json:"startup_picture"`

	// startup picture skip time
	// Required: true
	StartupPictureSkipTime *int64 `json:"startup_picture_skip_time"`
}

// Validate validates this application config
func (m *ApplicationConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomains(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncryptionKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncryptionMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartupPicture(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartupPictureSkipTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationConfig) validateAppID(formats strfmt.Registry) error {

	if err := validate.Required("app_id", "body", m.AppID); err != nil {
		return err
	}

	return nil
}

func (m *ApplicationConfig) validateDomains(formats strfmt.Registry) error {

	if err := validate.Required("domains", "body", m.Domains); err != nil {
		return err
	}

	return nil
}

func (m *ApplicationConfig) validateEncryptionKey(formats strfmt.Registry) error {

	if err := validate.Required("encryption_key", "body", m.EncryptionKey); err != nil {
		return err
	}

	return nil
}

func (m *ApplicationConfig) validateEncryptionMethod(formats strfmt.Registry) error {

	if err := validate.Required("encryption_method", "body", m.EncryptionMethod); err != nil {
		return err
	}

	return nil
}

func (m *ApplicationConfig) validateStartupPicture(formats strfmt.Registry) error {

	if err := validate.Required("startup_picture", "body", m.StartupPicture); err != nil {
		return err
	}

	return nil
}

func (m *ApplicationConfig) validateStartupPictureSkipTime(formats strfmt.Registry) error {

	if err := validate.Required("startup_picture_skip_time", "body", m.StartupPictureSkipTime); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this application config based on context it is used
func (m *ApplicationConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ApplicationConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplicationConfig) UnmarshalBinary(b []byte) error {
	var res ApplicationConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
