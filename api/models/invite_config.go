// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InviteConfig InviteConfig
//
// swagger:model InviteConfig
type InviteConfig struct {

	// forced invite
	// Required: true
	ForcedInvite bool `json:"forced_invite"`

	// only first purchase
	// Required: true
	OnlyFirstPurchase bool `json:"only_first_purchase"`

	// referral percentage
	// Required: true
	ReferralPercentage *int64 `json:"referral_percentage"`
}

// Validate validates this invite config
func (m *InviteConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateForcedInvite(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnlyFirstPurchase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReferralPercentage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InviteConfig) validateForcedInvite(formats strfmt.Registry) error {

	if err := validate.Required("forced_invite", "body", bool(m.ForcedInvite)); err != nil {
		return err
	}

	return nil
}

func (m *InviteConfig) validateOnlyFirstPurchase(formats strfmt.Registry) error {

	if err := validate.Required("only_first_purchase", "body", bool(m.OnlyFirstPurchase)); err != nil {
		return err
	}

	return nil
}

func (m *InviteConfig) validateReferralPercentage(formats strfmt.Registry) error {

	if err := validate.Required("referral_percentage", "body", m.ReferralPercentage); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this invite config based on context it is used
func (m *InviteConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *InviteConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InviteConfig) UnmarshalBinary(b []byte) error {
	var res InviteConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
