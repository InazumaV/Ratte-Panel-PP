// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VlessProtocol VlessProtocol
//
// swagger:model VlessProtocol
type VlessProtocol struct {

	// host
	// Required: true
	Host *string `json:"host"`

	// network
	// Required: true
	Network *string `json:"network"`

	// port
	// Required: true
	Port *int32 `json:"port"`

	// security
	// Required: true
	Security *string `json:"security"`

	// security config
	// Required: true
	SecurityConfig *string `json:"security_config"`

	// transport
	// Required: true
	Transport *string `json:"transport"`

	// xtls
	// Required: true
	Xtls *string `json:"xtls"`
}

// Validate validates this vless protocol
func (m *VlessProtocol) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateXtls(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VlessProtocol) validateHost(formats strfmt.Registry) error {

	if err := validate.Required("host", "body", m.Host); err != nil {
		return err
	}

	return nil
}

func (m *VlessProtocol) validateNetwork(formats strfmt.Registry) error {

	if err := validate.Required("network", "body", m.Network); err != nil {
		return err
	}

	return nil
}

func (m *VlessProtocol) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("port", "body", m.Port); err != nil {
		return err
	}

	return nil
}

func (m *VlessProtocol) validateSecurity(formats strfmt.Registry) error {

	if err := validate.Required("security", "body", m.Security); err != nil {
		return err
	}

	return nil
}

func (m *VlessProtocol) validateSecurityConfig(formats strfmt.Registry) error {

	if err := validate.Required("security_config", "body", m.SecurityConfig); err != nil {
		return err
	}

	return nil
}

func (m *VlessProtocol) validateTransport(formats strfmt.Registry) error {

	if err := validate.Required("transport", "body", m.Transport); err != nil {
		return err
	}

	return nil
}

func (m *VlessProtocol) validateXtls(formats strfmt.Registry) error {

	if err := validate.Required("xtls", "body", m.Xtls); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this vless protocol based on context it is used
func (m *VlessProtocol) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VlessProtocol) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VlessProtocol) UnmarshalBinary(b []byte) error {
	var res VlessProtocol
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
