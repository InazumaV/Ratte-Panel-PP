// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserAffiliate UserAffiliate
//
// swagger:model UserAffiliate
type UserAffiliate struct {

	// avatar
	// Required: true
	Avatar *string `json:"avatar"`

	// enable
	// Required: true
	Enable bool `json:"enable"`

	// identifier
	// Required: true
	Identifier *string `json:"identifier"`

	// registered at
	// Required: true
	RegisteredAt *int64 `json:"registered_at"`
}

// Validate validates this user affiliate
func (m *UserAffiliate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvatar(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserAffiliate) validateAvatar(formats strfmt.Registry) error {

	if err := validate.Required("avatar", "body", m.Avatar); err != nil {
		return err
	}

	return nil
}

func (m *UserAffiliate) validateEnable(formats strfmt.Registry) error {

	if err := validate.Required("enable", "body", bool(m.Enable)); err != nil {
		return err
	}

	return nil
}

func (m *UserAffiliate) validateIdentifier(formats strfmt.Registry) error {

	if err := validate.Required("identifier", "body", m.Identifier); err != nil {
		return err
	}

	return nil
}

func (m *UserAffiliate) validateRegisteredAt(formats strfmt.Registry) error {

	if err := validate.Required("registered_at", "body", m.RegisteredAt); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this user affiliate based on context it is used
func (m *UserAffiliate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UserAffiliate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserAffiliate) UnmarshalBinary(b []byte) error {
	var res UserAffiliate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
