// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AppUserSubcbribe AppUserSubcbribe
//
// swagger:model AppUserSubcbribe
type AppUserSubcbribe struct {

	// device limit
	// Required: true
	DeviceLimit *int64 `json:"device_limit"`

	// download
	// Required: true
	Download *int64 `json:"download"`

	// expire time
	// Required: true
	ExpireTime *string `json:"expire_time"`

	// id
	// Required: true
	ID *int64 `json:"id"`

	// list
	// Required: true
	List []*AppUserSubscbribeNode `json:"list"`

	// name
	// Required: true
	Name *string `json:"name"`

	// start time
	// Required: true
	StartTime *string `json:"start_time"`

	// traffic
	// Required: true
	Traffic *int64 `json:"traffic"`

	// upload
	// Required: true
	Upload *int64 `json:"upload"`
}

// Validate validates this app user subcbribe
func (m *AppUserSubcbribe) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeviceLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDownload(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpireTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTraffic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpload(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppUserSubcbribe) validateDeviceLimit(formats strfmt.Registry) error {

	if err := validate.Required("device_limit", "body", m.DeviceLimit); err != nil {
		return err
	}

	return nil
}

func (m *AppUserSubcbribe) validateDownload(formats strfmt.Registry) error {

	if err := validate.Required("download", "body", m.Download); err != nil {
		return err
	}

	return nil
}

func (m *AppUserSubcbribe) validateExpireTime(formats strfmt.Registry) error {

	if err := validate.Required("expire_time", "body", m.ExpireTime); err != nil {
		return err
	}

	return nil
}

func (m *AppUserSubcbribe) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *AppUserSubcbribe) validateList(formats strfmt.Registry) error {

	if err := validate.Required("list", "body", m.List); err != nil {
		return err
	}

	for i := 0; i < len(m.List); i++ {
		if swag.IsZero(m.List[i]) { // not required
			continue
		}

		if m.List[i] != nil {
			if err := m.List[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AppUserSubcbribe) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *AppUserSubcbribe) validateStartTime(formats strfmt.Registry) error {

	if err := validate.Required("start_time", "body", m.StartTime); err != nil {
		return err
	}

	return nil
}

func (m *AppUserSubcbribe) validateTraffic(formats strfmt.Registry) error {

	if err := validate.Required("traffic", "body", m.Traffic); err != nil {
		return err
	}

	return nil
}

func (m *AppUserSubcbribe) validateUpload(formats strfmt.Registry) error {

	if err := validate.Required("upload", "body", m.Upload); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this app user subcbribe based on the context it is used
func (m *AppUserSubcbribe) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppUserSubcbribe) contextValidateList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.List); i++ {

		if m.List[i] != nil {

			if swag.IsZero(m.List[i]) { // not required
				return nil
			}

			if err := m.List[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AppUserSubcbribe) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AppUserSubcbribe) UnmarshalBinary(b []byte) error {
	var res AppUserSubcbribe
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
