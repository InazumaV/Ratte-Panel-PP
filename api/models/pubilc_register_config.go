// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PubilcRegisterConfig PubilcRegisterConfig
//
// swagger:model PubilcRegisterConfig
type PubilcRegisterConfig struct {

	// enable ip register limit
	// Required: true
	EnableIPRegisterLimit bool `json:"enable_ip_register_limit"`

	// ip register limit
	// Required: true
	IPRegisterLimit *int64 `json:"ip_register_limit"`

	// ip register limit duration
	// Required: true
	IPRegisterLimitDuration *int64 `json:"ip_register_limit_duration"`

	// stop register
	// Required: true
	StopRegister bool `json:"stop_register"`
}

// Validate validates this pubilc register config
func (m *PubilcRegisterConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnableIPRegisterLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPRegisterLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPRegisterLimitDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStopRegister(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PubilcRegisterConfig) validateEnableIPRegisterLimit(formats strfmt.Registry) error {

	if err := validate.Required("enable_ip_register_limit", "body", bool(m.EnableIPRegisterLimit)); err != nil {
		return err
	}

	return nil
}

func (m *PubilcRegisterConfig) validateIPRegisterLimit(formats strfmt.Registry) error {

	if err := validate.Required("ip_register_limit", "body", m.IPRegisterLimit); err != nil {
		return err
	}

	return nil
}

func (m *PubilcRegisterConfig) validateIPRegisterLimitDuration(formats strfmt.Registry) error {

	if err := validate.Required("ip_register_limit_duration", "body", m.IPRegisterLimitDuration); err != nil {
		return err
	}

	return nil
}

func (m *PubilcRegisterConfig) validateStopRegister(formats strfmt.Registry) error {

	if err := validate.Required("stop_register", "body", bool(m.StopRegister)); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this pubilc register config based on context it is used
func (m *PubilcRegisterConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PubilcRegisterConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PubilcRegisterConfig) UnmarshalBinary(b []byte) error {
	var res PubilcRegisterConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
