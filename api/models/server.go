// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Server Server
//
// swagger:model Server
type Server struct {

	// city
	// Required: true
	City *string `json:"city"`

	// config
	// Required: true
	Config interface{} `json:"config"`

	// country
	// Required: true
	Country *string `json:"country"`

	// created at
	// Required: true
	CreatedAt *int64 `json:"created_at"`

	// enable
	// Required: true
	Enable bool `json:"enable"`

	// group id
	// Required: true
	GroupID *int64 `json:"group_id"`

	// id
	// Required: true
	ID *int64 `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`

	// protocol
	// Required: true
	Protocol *string `json:"protocol"`

	// relay mode
	// Required: true
	RelayMode *string `json:"relay_mode"`

	// relay node
	// Required: true
	RelayNode []*NodeRelay `json:"relay_node"`

	// server addr
	// Required: true
	ServerAddr *string `json:"server_addr"`

	// sort
	// Required: true
	Sort *int64 `json:"sort"`

	// speed limit
	// Required: true
	SpeedLimit *int32 `json:"speed_limit"`

	// status
	// Required: true
	Status *NodeStatus `json:"status"`

	// tags
	// Required: true
	Tags []string `json:"tags"`

	// traffic ratio
	// Required: true
	TrafficRatio *float32 `json:"traffic_ratio"`

	// updated at
	// Required: true
	UpdatedAt *int64 `json:"updated_at"`
}

// Validate validates this server
func (m *Server) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroupID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelayMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelayNode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerAddr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpeedLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrafficRatio(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Server) validateCity(formats strfmt.Registry) error {

	if err := validate.Required("city", "body", m.City); err != nil {
		return err
	}

	return nil
}

func (m *Server) validateConfig(formats strfmt.Registry) error {

	if m.Config == nil {
		return errors.Required("config", "body", nil)
	}

	return nil
}

func (m *Server) validateCountry(formats strfmt.Registry) error {

	if err := validate.Required("country", "body", m.Country); err != nil {
		return err
	}

	return nil
}

func (m *Server) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *Server) validateEnable(formats strfmt.Registry) error {

	if err := validate.Required("enable", "body", bool(m.Enable)); err != nil {
		return err
	}

	return nil
}

func (m *Server) validateGroupID(formats strfmt.Registry) error {

	if err := validate.Required("group_id", "body", m.GroupID); err != nil {
		return err
	}

	return nil
}

func (m *Server) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Server) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Server) validateProtocol(formats strfmt.Registry) error {

	if err := validate.Required("protocol", "body", m.Protocol); err != nil {
		return err
	}

	return nil
}

func (m *Server) validateRelayMode(formats strfmt.Registry) error {

	if err := validate.Required("relay_mode", "body", m.RelayMode); err != nil {
		return err
	}

	return nil
}

func (m *Server) validateRelayNode(formats strfmt.Registry) error {

	if err := validate.Required("relay_node", "body", m.RelayNode); err != nil {
		return err
	}

	for i := 0; i < len(m.RelayNode); i++ {
		if swag.IsZero(m.RelayNode[i]) { // not required
			continue
		}

		if m.RelayNode[i] != nil {
			if err := m.RelayNode[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("relay_node" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("relay_node" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Server) validateServerAddr(formats strfmt.Registry) error {

	if err := validate.Required("server_addr", "body", m.ServerAddr); err != nil {
		return err
	}

	return nil
}

func (m *Server) validateSort(formats strfmt.Registry) error {

	if err := validate.Required("sort", "body", m.Sort); err != nil {
		return err
	}

	return nil
}

func (m *Server) validateSpeedLimit(formats strfmt.Registry) error {

	if err := validate.Required("speed_limit", "body", m.SpeedLimit); err != nil {
		return err
	}

	return nil
}

func (m *Server) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *Server) validateTags(formats strfmt.Registry) error {

	if err := validate.Required("tags", "body", m.Tags); err != nil {
		return err
	}

	return nil
}

func (m *Server) validateTrafficRatio(formats strfmt.Registry) error {

	if err := validate.Required("traffic_ratio", "body", m.TrafficRatio); err != nil {
		return err
	}

	return nil
}

func (m *Server) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this server based on the context it is used
func (m *Server) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRelayNode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Server) contextValidateRelayNode(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RelayNode); i++ {

		if m.RelayNode[i] != nil {

			if swag.IsZero(m.RelayNode[i]) { // not required
				return nil
			}

			if err := m.RelayNode[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("relay_node" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("relay_node" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Server) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {

		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Server) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Server) UnmarshalBinary(b []byte) error {
	var res Server
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
