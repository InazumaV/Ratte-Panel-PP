// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TrojanProtocol TrojanProtocol
//
// swagger:model TrojanProtocol
type TrojanProtocol struct {

	// enable tls
	// Required: true
	EnableTLS bool `json:"enable_tls"`

	// host
	// Required: true
	Host *string `json:"host"`

	// network
	// Required: true
	Network *string `json:"network"`

	// port
	// Required: true
	Port *int32 `json:"port"`

	// tls config
	// Required: true
	TLSConfig *string `json:"tls_config"`

	// transport
	// Required: true
	Transport *string `json:"transport"`
}

// Validate validates this trojan protocol
func (m *TrojanProtocol) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnableTLS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTLSConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransport(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrojanProtocol) validateEnableTLS(formats strfmt.Registry) error {

	if err := validate.Required("enable_tls", "body", bool(m.EnableTLS)); err != nil {
		return err
	}

	return nil
}

func (m *TrojanProtocol) validateHost(formats strfmt.Registry) error {

	if err := validate.Required("host", "body", m.Host); err != nil {
		return err
	}

	return nil
}

func (m *TrojanProtocol) validateNetwork(formats strfmt.Registry) error {

	if err := validate.Required("network", "body", m.Network); err != nil {
		return err
	}

	return nil
}

func (m *TrojanProtocol) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("port", "body", m.Port); err != nil {
		return err
	}

	return nil
}

func (m *TrojanProtocol) validateTLSConfig(formats strfmt.Registry) error {

	if err := validate.Required("tls_config", "body", m.TLSConfig); err != nil {
		return err
	}

	return nil
}

func (m *TrojanProtocol) validateTransport(formats strfmt.Registry) error {

	if err := validate.Required("transport", "body", m.Transport); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this trojan protocol based on context it is used
func (m *TrojanProtocol) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TrojanProtocol) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TrojanProtocol) UnmarshalBinary(b []byte) error {
	var res TrojanProtocol
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
