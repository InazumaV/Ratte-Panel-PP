// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CurrencyConfig CurrencyConfig
//
// swagger:model CurrencyConfig
type CurrencyConfig struct {

	// access key
	// Required: true
	AccessKey *string `json:"access_key"`

	// currency symbol
	// Required: true
	CurrencySymbol *string `json:"currency_symbol"`

	// currency unit
	// Required: true
	CurrencyUnit *string `json:"currency_unit"`
}

// Validate validates this currency config
func (m *CurrencyConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrencySymbol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrencyUnit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CurrencyConfig) validateAccessKey(formats strfmt.Registry) error {

	if err := validate.Required("access_key", "body", m.AccessKey); err != nil {
		return err
	}

	return nil
}

func (m *CurrencyConfig) validateCurrencySymbol(formats strfmt.Registry) error {

	if err := validate.Required("currency_symbol", "body", m.CurrencySymbol); err != nil {
		return err
	}

	return nil
}

func (m *CurrencyConfig) validateCurrencyUnit(formats strfmt.Registry) error {

	if err := validate.Required("currency_unit", "body", m.CurrencyUnit); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this currency config based on context it is used
func (m *CurrencyConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CurrencyConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CurrencyConfig) UnmarshalBinary(b []byte) error {
	var res CurrencyConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
