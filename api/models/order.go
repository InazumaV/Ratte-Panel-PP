// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Order Order
//
// swagger:model Order
type Order struct {

	// amount
	// Required: true
	Amount *int64 `json:"amount"`

	// commission
	Commission int64 `json:"commission,omitempty"`

	// coupon
	// Required: true
	Coupon *string `json:"coupon"`

	// coupon discount
	// Required: true
	CouponDiscount *int64 `json:"coupon_discount"`

	// created at
	// Required: true
	CreatedAt *int64 `json:"created_at"`

	// discount
	// Required: true
	Discount *int64 `json:"discount"`

	// fee amount
	// Required: true
	FeeAmount *int64 `json:"fee_amount"`

	// gift amount
	// Required: true
	GiftAmount *int64 `json:"gift_amount"`

	// id
	// Required: true
	ID *int64 `json:"id"`

	// order no
	// Required: true
	OrderNo *string `json:"order_no"`

	// payment
	// Required: true
	Payment *PaymentMethod `json:"payment"`

	// price
	// Required: true
	Price *int64 `json:"price"`

	// quantity
	// Required: true
	Quantity *int64 `json:"quantity"`

	// status
	// Required: true
	Status *uint8 `json:"status"`

	// subscribe id
	// Required: true
	SubscribeID *int64 `json:"subscribe_id"`

	// trade no
	// Required: true
	TradeNo *string `json:"trade_no"`

	// type
	// Required: true
	Type *uint8 `json:"type"`

	// updated at
	// Required: true
	UpdatedAt *int64 `json:"updated_at"`

	// user id
	// Required: true
	UserID *int64 `json:"user_id"`
}

// Validate validates this order
func (m *Order) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCoupon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCouponDiscount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiscount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGiftAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderNo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscribeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTradeNo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Order) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateCoupon(formats strfmt.Registry) error {

	if err := validate.Required("coupon", "body", m.Coupon); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateCouponDiscount(formats strfmt.Registry) error {

	if err := validate.Required("coupon_discount", "body", m.CouponDiscount); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateDiscount(formats strfmt.Registry) error {

	if err := validate.Required("discount", "body", m.Discount); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateFeeAmount(formats strfmt.Registry) error {

	if err := validate.Required("fee_amount", "body", m.FeeAmount); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateGiftAmount(formats strfmt.Registry) error {

	if err := validate.Required("gift_amount", "body", m.GiftAmount); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateOrderNo(formats strfmt.Registry) error {

	if err := validate.Required("order_no", "body", m.OrderNo); err != nil {
		return err
	}

	return nil
}

func (m *Order) validatePayment(formats strfmt.Registry) error {

	if err := validate.Required("payment", "body", m.Payment); err != nil {
		return err
	}

	if m.Payment != nil {
		if err := m.Payment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("payment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("payment")
			}
			return err
		}
	}

	return nil
}

func (m *Order) validatePrice(formats strfmt.Registry) error {

	if err := validate.Required("price", "body", m.Price); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateQuantity(formats strfmt.Registry) error {

	if err := validate.Required("quantity", "body", m.Quantity); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateSubscribeID(formats strfmt.Registry) error {

	if err := validate.Required("subscribe_id", "body", m.SubscribeID); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateTradeNo(formats strfmt.Registry) error {

	if err := validate.Required("trade_no", "body", m.TradeNo); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("user_id", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this order based on the context it is used
func (m *Order) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePayment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Order) contextValidatePayment(ctx context.Context, formats strfmt.Registry) error {

	if m.Payment != nil {

		if err := m.Payment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("payment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("payment")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Order) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Order) UnmarshalBinary(b []byte) error {
	var res Order
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
