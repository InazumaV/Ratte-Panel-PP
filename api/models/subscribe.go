// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Subscribe Subscribe
//
// swagger:model Subscribe
type Subscribe struct {

	// allow deduction
	// Required: true
	AllowDeduction bool `json:"allow_deduction"`

	// created at
	// Required: true
	CreatedAt *int64 `json:"created_at"`

	// deduction ratio
	// Required: true
	DeductionRatio *int64 `json:"deduction_ratio"`

	// description
	// Required: true
	Description *string `json:"description"`

	// device limit
	// Required: true
	DeviceLimit *int64 `json:"device_limit"`

	// discount
	// Required: true
	Discount []*SubscribeDiscount `json:"discount"`

	// group id
	// Required: true
	GroupID *int64 `json:"group_id"`

	// id
	// Required: true
	ID *int64 `json:"id"`

	// inventory
	// Required: true
	Inventory *int64 `json:"inventory"`

	// name
	// Required: true
	Name *string `json:"name"`

	// quota
	// Required: true
	Quota *int64 `json:"quota"`

	// renewal reset
	// Required: true
	RenewalReset bool `json:"renewal_reset"`

	// replacement
	// Required: true
	Replacement *int64 `json:"replacement"`

	// reset cycle
	// Required: true
	ResetCycle *int64 `json:"reset_cycle"`

	// sell
	// Required: true
	Sell bool `json:"sell"`

	// server
	// Required: true
	Server []int64 `json:"server"`

	// server group
	// Required: true
	ServerGroup []int64 `json:"server_group"`

	// show
	// Required: true
	Show bool `json:"show"`

	// sort
	// Required: true
	Sort *int64 `json:"sort"`

	// speed limit
	// Required: true
	SpeedLimit *int64 `json:"speed_limit"`

	// traffic
	// Required: true
	Traffic *int64 `json:"traffic"`

	// unit price
	// Required: true
	UnitPrice *int64 `json:"unit_price"`

	// unit time
	// Required: true
	UnitTime *string `json:"unit_time"`

	// updated at
	// Required: true
	UpdatedAt *int64 `json:"updated_at"`
}

// Validate validates this subscribe
func (m *Subscribe) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllowDeduction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeductionRatio(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiscount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroupID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInventory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuota(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRenewalReset(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplacement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResetCycle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSell(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpeedLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTraffic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnitPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnitTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Subscribe) validateAllowDeduction(formats strfmt.Registry) error {

	if err := validate.Required("allow_deduction", "body", bool(m.AllowDeduction)); err != nil {
		return err
	}

	return nil
}

func (m *Subscribe) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *Subscribe) validateDeductionRatio(formats strfmt.Registry) error {

	if err := validate.Required("deduction_ratio", "body", m.DeductionRatio); err != nil {
		return err
	}

	return nil
}

func (m *Subscribe) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *Subscribe) validateDeviceLimit(formats strfmt.Registry) error {

	if err := validate.Required("device_limit", "body", m.DeviceLimit); err != nil {
		return err
	}

	return nil
}

func (m *Subscribe) validateDiscount(formats strfmt.Registry) error {

	if err := validate.Required("discount", "body", m.Discount); err != nil {
		return err
	}

	for i := 0; i < len(m.Discount); i++ {
		if swag.IsZero(m.Discount[i]) { // not required
			continue
		}

		if m.Discount[i] != nil {
			if err := m.Discount[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("discount" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("discount" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Subscribe) validateGroupID(formats strfmt.Registry) error {

	if err := validate.Required("group_id", "body", m.GroupID); err != nil {
		return err
	}

	return nil
}

func (m *Subscribe) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Subscribe) validateInventory(formats strfmt.Registry) error {

	if err := validate.Required("inventory", "body", m.Inventory); err != nil {
		return err
	}

	return nil
}

func (m *Subscribe) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Subscribe) validateQuota(formats strfmt.Registry) error {

	if err := validate.Required("quota", "body", m.Quota); err != nil {
		return err
	}

	return nil
}

func (m *Subscribe) validateRenewalReset(formats strfmt.Registry) error {

	if err := validate.Required("renewal_reset", "body", bool(m.RenewalReset)); err != nil {
		return err
	}

	return nil
}

func (m *Subscribe) validateReplacement(formats strfmt.Registry) error {

	if err := validate.Required("replacement", "body", m.Replacement); err != nil {
		return err
	}

	return nil
}

func (m *Subscribe) validateResetCycle(formats strfmt.Registry) error {

	if err := validate.Required("reset_cycle", "body", m.ResetCycle); err != nil {
		return err
	}

	return nil
}

func (m *Subscribe) validateSell(formats strfmt.Registry) error {

	if err := validate.Required("sell", "body", bool(m.Sell)); err != nil {
		return err
	}

	return nil
}

func (m *Subscribe) validateServer(formats strfmt.Registry) error {

	if err := validate.Required("server", "body", m.Server); err != nil {
		return err
	}

	return nil
}

func (m *Subscribe) validateServerGroup(formats strfmt.Registry) error {

	if err := validate.Required("server_group", "body", m.ServerGroup); err != nil {
		return err
	}

	return nil
}

func (m *Subscribe) validateShow(formats strfmt.Registry) error {

	if err := validate.Required("show", "body", bool(m.Show)); err != nil {
		return err
	}

	return nil
}

func (m *Subscribe) validateSort(formats strfmt.Registry) error {

	if err := validate.Required("sort", "body", m.Sort); err != nil {
		return err
	}

	return nil
}

func (m *Subscribe) validateSpeedLimit(formats strfmt.Registry) error {

	if err := validate.Required("speed_limit", "body", m.SpeedLimit); err != nil {
		return err
	}

	return nil
}

func (m *Subscribe) validateTraffic(formats strfmt.Registry) error {

	if err := validate.Required("traffic", "body", m.Traffic); err != nil {
		return err
	}

	return nil
}

func (m *Subscribe) validateUnitPrice(formats strfmt.Registry) error {

	if err := validate.Required("unit_price", "body", m.UnitPrice); err != nil {
		return err
	}

	return nil
}

func (m *Subscribe) validateUnitTime(formats strfmt.Registry) error {

	if err := validate.Required("unit_time", "body", m.UnitTime); err != nil {
		return err
	}

	return nil
}

func (m *Subscribe) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this subscribe based on the context it is used
func (m *Subscribe) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDiscount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Subscribe) contextValidateDiscount(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Discount); i++ {

		if m.Discount[i] != nil {

			if swag.IsZero(m.Discount[i]) { // not required
				return nil
			}

			if err := m.Discount[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("discount" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("discount" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Subscribe) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Subscribe) UnmarshalBinary(b []byte) error {
	var res Subscribe
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
