// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NodeConfig NodeConfig
//
// swagger:model NodeConfig
type NodeConfig struct {

	// node pull interval
	// Required: true
	NodePullInterval *int64 `json:"node_pull_interval"`

	// node push interval
	// Required: true
	NodePushInterval *int64 `json:"node_push_interval"`

	// node secret
	// Required: true
	NodeSecret *string `json:"node_secret"`
}

// Validate validates this node config
func (m *NodeConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNodePullInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodePushInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeSecret(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeConfig) validateNodePullInterval(formats strfmt.Registry) error {

	if err := validate.Required("node_pull_interval", "body", m.NodePullInterval); err != nil {
		return err
	}

	return nil
}

func (m *NodeConfig) validateNodePushInterval(formats strfmt.Registry) error {

	if err := validate.Required("node_push_interval", "body", m.NodePushInterval); err != nil {
		return err
	}

	return nil
}

func (m *NodeConfig) validateNodeSecret(formats strfmt.Registry) error {

	if err := validate.Required("node_secret", "body", m.NodeSecret); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this node config based on context it is used
func (m *NodeConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NodeConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeConfig) UnmarshalBinary(b []byte) error {
	var res NodeConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
