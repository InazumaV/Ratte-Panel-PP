// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// User User
//
// swagger:model User
type User struct {

	// auth methods
	// Required: true
	AuthMethods []*UserAuthMethod `json:"auth_methods"`

	// avatar
	// Required: true
	Avatar *string `json:"avatar"`

	// balance
	// Required: true
	Balance *int64 `json:"balance"`

	// commission
	// Required: true
	Commission *int64 `json:"commission"`

	// created at
	// Required: true
	CreatedAt *int64 `json:"created_at"`

	// deleted at
	DeletedAt int64 `json:"deleted_at,omitempty"`

	// enable
	// Required: true
	Enable bool `json:"enable"`

	// enable balance notify
	// Required: true
	EnableBalanceNotify bool `json:"enable_balance_notify"`

	// enable login notify
	// Required: true
	EnableLoginNotify bool `json:"enable_login_notify"`

	// enable subscribe notify
	// Required: true
	EnableSubscribeNotify bool `json:"enable_subscribe_notify"`

	// enable trade notify
	// Required: true
	EnableTradeNotify bool `json:"enable_trade_notify"`

	// gift amount
	// Required: true
	GiftAmount *int64 `json:"gift_amount"`

	// id
	// Required: true
	ID *int64 `json:"id"`

	// is admin
	IsAdmin bool `json:"is_admin,omitempty"`

	// is del
	IsDel bool `json:"is_del,omitempty"`

	// refer code
	// Required: true
	ReferCode *string `json:"refer_code"`

	// referer id
	// Required: true
	RefererID *int64 `json:"referer_id"`

	// telegram
	// Required: true
	Telegram *int64 `json:"telegram"`

	// updated at
	// Required: true
	UpdatedAt *int64 `json:"updated_at"`

	// user devices
	// Required: true
	UserDevices []*UserDevice `json:"user_devices"`
}

// Validate validates this user
func (m *User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthMethods(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAvatar(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommission(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnableBalanceNotify(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnableLoginNotify(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnableSubscribeNotify(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnableTradeNotify(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGiftAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReferCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefererID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTelegram(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDevices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) validateAuthMethods(formats strfmt.Registry) error {

	if err := validate.Required("auth_methods", "body", m.AuthMethods); err != nil {
		return err
	}

	for i := 0; i < len(m.AuthMethods); i++ {
		if swag.IsZero(m.AuthMethods[i]) { // not required
			continue
		}

		if m.AuthMethods[i] != nil {
			if err := m.AuthMethods[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("auth_methods" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("auth_methods" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *User) validateAvatar(formats strfmt.Registry) error {

	if err := validate.Required("avatar", "body", m.Avatar); err != nil {
		return err
	}

	return nil
}

func (m *User) validateBalance(formats strfmt.Registry) error {

	if err := validate.Required("balance", "body", m.Balance); err != nil {
		return err
	}

	return nil
}

func (m *User) validateCommission(formats strfmt.Registry) error {

	if err := validate.Required("commission", "body", m.Commission); err != nil {
		return err
	}

	return nil
}

func (m *User) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *User) validateEnable(formats strfmt.Registry) error {

	if err := validate.Required("enable", "body", bool(m.Enable)); err != nil {
		return err
	}

	return nil
}

func (m *User) validateEnableBalanceNotify(formats strfmt.Registry) error {

	if err := validate.Required("enable_balance_notify", "body", bool(m.EnableBalanceNotify)); err != nil {
		return err
	}

	return nil
}

func (m *User) validateEnableLoginNotify(formats strfmt.Registry) error {

	if err := validate.Required("enable_login_notify", "body", bool(m.EnableLoginNotify)); err != nil {
		return err
	}

	return nil
}

func (m *User) validateEnableSubscribeNotify(formats strfmt.Registry) error {

	if err := validate.Required("enable_subscribe_notify", "body", bool(m.EnableSubscribeNotify)); err != nil {
		return err
	}

	return nil
}

func (m *User) validateEnableTradeNotify(formats strfmt.Registry) error {

	if err := validate.Required("enable_trade_notify", "body", bool(m.EnableTradeNotify)); err != nil {
		return err
	}

	return nil
}

func (m *User) validateGiftAmount(formats strfmt.Registry) error {

	if err := validate.Required("gift_amount", "body", m.GiftAmount); err != nil {
		return err
	}

	return nil
}

func (m *User) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *User) validateReferCode(formats strfmt.Registry) error {

	if err := validate.Required("refer_code", "body", m.ReferCode); err != nil {
		return err
	}

	return nil
}

func (m *User) validateRefererID(formats strfmt.Registry) error {

	if err := validate.Required("referer_id", "body", m.RefererID); err != nil {
		return err
	}

	return nil
}

func (m *User) validateTelegram(formats strfmt.Registry) error {

	if err := validate.Required("telegram", "body", m.Telegram); err != nil {
		return err
	}

	return nil
}

func (m *User) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

func (m *User) validateUserDevices(formats strfmt.Registry) error {

	if err := validate.Required("user_devices", "body", m.UserDevices); err != nil {
		return err
	}

	for i := 0; i < len(m.UserDevices); i++ {
		if swag.IsZero(m.UserDevices[i]) { // not required
			continue
		}

		if m.UserDevices[i] != nil {
			if err := m.UserDevices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("user_devices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("user_devices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this user based on the context it is used
func (m *User) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuthMethods(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserDevices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) contextValidateAuthMethods(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AuthMethods); i++ {

		if m.AuthMethods[i] != nil {

			if swag.IsZero(m.AuthMethods[i]) { // not required
				return nil
			}

			if err := m.AuthMethods[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("auth_methods" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("auth_methods" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *User) contextValidateUserDevices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UserDevices); i++ {

		if m.UserDevices[i] != nil {

			if swag.IsZero(m.UserDevices[i]) { // not required
				return nil
			}

			if err := m.UserDevices[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("user_devices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("user_devices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *User) UnmarshalBinary(b []byte) error {
	var res User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
