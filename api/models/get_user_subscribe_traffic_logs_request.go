// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetUserSubscribeTrafficLogsRequest GetUserSubscribeTrafficLogsRequest
//
// swagger:model GetUserSubscribeTrafficLogsRequest
type GetUserSubscribeTrafficLogsRequest struct {

	// end time
	// Required: true
	EndTime *int64 `json:"end_time"`

	// page
	// Required: true
	Page *int32 `json:"page"`

	// size
	// Required: true
	Size *int32 `json:"size"`

	// start time
	// Required: true
	StartTime *int64 `json:"start_time"`

	// subscribe id
	// Required: true
	SubscribeID *int64 `json:"subscribe_id"`

	// user id
	// Required: true
	UserID *int64 `json:"user_id"`
}

// Validate validates this get user subscribe traffic logs request
func (m *GetUserSubscribeTrafficLogsRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscribeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetUserSubscribeTrafficLogsRequest) validateEndTime(formats strfmt.Registry) error {

	if err := validate.Required("end_time", "body", m.EndTime); err != nil {
		return err
	}

	return nil
}

func (m *GetUserSubscribeTrafficLogsRequest) validatePage(formats strfmt.Registry) error {

	if err := validate.Required("page", "body", m.Page); err != nil {
		return err
	}

	return nil
}

func (m *GetUserSubscribeTrafficLogsRequest) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

func (m *GetUserSubscribeTrafficLogsRequest) validateStartTime(formats strfmt.Registry) error {

	if err := validate.Required("start_time", "body", m.StartTime); err != nil {
		return err
	}

	return nil
}

func (m *GetUserSubscribeTrafficLogsRequest) validateSubscribeID(formats strfmt.Registry) error {

	if err := validate.Required("subscribe_id", "body", m.SubscribeID); err != nil {
		return err
	}

	return nil
}

func (m *GetUserSubscribeTrafficLogsRequest) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("user_id", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get user subscribe traffic logs request based on context it is used
func (m *GetUserSubscribeTrafficLogsRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GetUserSubscribeTrafficLogsRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetUserSubscribeTrafficLogsRequest) UnmarshalBinary(b []byte) error {
	var res GetUserSubscribeTrafficLogsRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
