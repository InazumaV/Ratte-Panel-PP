// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VerifyConfig VerifyConfig
//
// swagger:model VerifyConfig
type VerifyConfig struct {

	// enable login verify
	// Required: true
	EnableLoginVerify bool `json:"enable_login_verify"`

	// enable register verify
	// Required: true
	EnableRegisterVerify bool `json:"enable_register_verify"`

	// enable reset password verify
	// Required: true
	EnableResetPasswordVerify bool `json:"enable_reset_password_verify"`

	// turnstile secret
	// Required: true
	TurnstileSecret *string `json:"turnstile_secret"`

	// turnstile site key
	// Required: true
	TurnstileSiteKey *string `json:"turnstile_site_key"`
}

// Validate validates this verify config
func (m *VerifyConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnableLoginVerify(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnableRegisterVerify(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnableResetPasswordVerify(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTurnstileSecret(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTurnstileSiteKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VerifyConfig) validateEnableLoginVerify(formats strfmt.Registry) error {

	if err := validate.Required("enable_login_verify", "body", bool(m.EnableLoginVerify)); err != nil {
		return err
	}

	return nil
}

func (m *VerifyConfig) validateEnableRegisterVerify(formats strfmt.Registry) error {

	if err := validate.Required("enable_register_verify", "body", bool(m.EnableRegisterVerify)); err != nil {
		return err
	}

	return nil
}

func (m *VerifyConfig) validateEnableResetPasswordVerify(formats strfmt.Registry) error {

	if err := validate.Required("enable_reset_password_verify", "body", bool(m.EnableResetPasswordVerify)); err != nil {
		return err
	}

	return nil
}

func (m *VerifyConfig) validateTurnstileSecret(formats strfmt.Registry) error {

	if err := validate.Required("turnstile_secret", "body", m.TurnstileSecret); err != nil {
		return err
	}

	return nil
}

func (m *VerifyConfig) validateTurnstileSiteKey(formats strfmt.Registry) error {

	if err := validate.Required("turnstile_site_key", "body", m.TurnstileSiteKey); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this verify config based on context it is used
func (m *VerifyConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VerifyConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VerifyConfig) UnmarshalBinary(b []byte) error {
	var res VerifyConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
