// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserSubscribeLog UserSubscribeLog
//
// swagger:model UserSubscribeLog
type UserSubscribeLog struct {

	// created at
	// Required: true
	CreatedAt *int64 `json:"created_at"`

	// id
	// Required: true
	ID *int64 `json:"id"`

	// ip
	// Required: true
	IP *string `json:"ip"`

	// token
	// Required: true
	Token *string `json:"token"`

	// user agent
	// Required: true
	UserAgent *string `json:"user_agent"`

	// user id
	// Required: true
	UserID *int64 `json:"user_id"`

	// user subscribe id
	// Required: true
	UserSubscribeID *int64 `json:"user_subscribe_id"`
}

// Validate validates this user subscribe log
func (m *UserSubscribeLog) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserAgent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserSubscribeID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserSubscribeLog) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *UserSubscribeLog) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *UserSubscribeLog) validateIP(formats strfmt.Registry) error {

	if err := validate.Required("ip", "body", m.IP); err != nil {
		return err
	}

	return nil
}

func (m *UserSubscribeLog) validateToken(formats strfmt.Registry) error {

	if err := validate.Required("token", "body", m.Token); err != nil {
		return err
	}

	return nil
}

func (m *UserSubscribeLog) validateUserAgent(formats strfmt.Registry) error {

	if err := validate.Required("user_agent", "body", m.UserAgent); err != nil {
		return err
	}

	return nil
}

func (m *UserSubscribeLog) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("user_id", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

func (m *UserSubscribeLog) validateUserSubscribeID(formats strfmt.Registry) error {

	if err := validate.Required("user_subscribe_id", "body", m.UserSubscribeID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this user subscribe log based on context it is used
func (m *UserSubscribeLog) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UserSubscribeLog) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserSubscribeLog) UnmarshalBinary(b []byte) error {
	var res UserSubscribeLog
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
