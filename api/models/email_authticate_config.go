// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EmailAuthticateConfig EmailAuthticateConfig
//
// swagger:model EmailAuthticateConfig
type EmailAuthticateConfig struct {

	// domain suffix list
	// Required: true
	DomainSuffixList *string `json:"domain_suffix_list"`

	// enable
	// Required: true
	Enable bool `json:"enable"`

	// enable domain suffix
	// Required: true
	EnableDomainSuffix bool `json:"enable_domain_suffix"`

	// enable verify
	// Required: true
	EnableVerify bool `json:"enable_verify"`
}

// Validate validates this email authticate config
func (m *EmailAuthticateConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDomainSuffixList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnableDomainSuffix(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnableVerify(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EmailAuthticateConfig) validateDomainSuffixList(formats strfmt.Registry) error {

	if err := validate.Required("domain_suffix_list", "body", m.DomainSuffixList); err != nil {
		return err
	}

	return nil
}

func (m *EmailAuthticateConfig) validateEnable(formats strfmt.Registry) error {

	if err := validate.Required("enable", "body", bool(m.Enable)); err != nil {
		return err
	}

	return nil
}

func (m *EmailAuthticateConfig) validateEnableDomainSuffix(formats strfmt.Registry) error {

	if err := validate.Required("enable_domain_suffix", "body", bool(m.EnableDomainSuffix)); err != nil {
		return err
	}

	return nil
}

func (m *EmailAuthticateConfig) validateEnableVerify(formats strfmt.Registry) error {

	if err := validate.Required("enable_verify", "body", bool(m.EnableVerify)); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this email authticate config based on context it is used
func (m *EmailAuthticateConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EmailAuthticateConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EmailAuthticateConfig) UnmarshalBinary(b []byte) error {
	var res EmailAuthticateConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
