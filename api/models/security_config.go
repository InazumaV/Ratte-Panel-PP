// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SecurityConfig SecurityConfig
//
// swagger:model SecurityConfig
type SecurityConfig struct {

	// allow insecure
	// Required: true
	AllowInsecure bool `json:"allow_insecure"`

	// fingerprint
	// Required: true
	Fingerprint *string `json:"fingerprint"`

	// reality private key
	// Required: true
	RealityPrivateKey *string `json:"reality_private_key"`

	// reality public key
	// Required: true
	RealityPublicKey *string `json:"reality_public_key"`

	// reality server addr
	// Required: true
	RealityServerAddr *string `json:"reality_server_addr"`

	// reality server port
	// Required: true
	RealityServerPort *int32 `json:"reality_server_port"`

	// reality short id
	// Required: true
	RealityShortID *string `json:"reality_short_id"`

	// sni
	// Required: true
	Sni *string `json:"sni"`
}

// Validate validates this security config
func (m *SecurityConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllowInsecure(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFingerprint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRealityPrivateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRealityPublicKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRealityServerAddr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRealityServerPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRealityShortID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSni(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityConfig) validateAllowInsecure(formats strfmt.Registry) error {

	if err := validate.Required("allow_insecure", "body", bool(m.AllowInsecure)); err != nil {
		return err
	}

	return nil
}

func (m *SecurityConfig) validateFingerprint(formats strfmt.Registry) error {

	if err := validate.Required("fingerprint", "body", m.Fingerprint); err != nil {
		return err
	}

	return nil
}

func (m *SecurityConfig) validateRealityPrivateKey(formats strfmt.Registry) error {

	if err := validate.Required("reality_private_key", "body", m.RealityPrivateKey); err != nil {
		return err
	}

	return nil
}

func (m *SecurityConfig) validateRealityPublicKey(formats strfmt.Registry) error {

	if err := validate.Required("reality_public_key", "body", m.RealityPublicKey); err != nil {
		return err
	}

	return nil
}

func (m *SecurityConfig) validateRealityServerAddr(formats strfmt.Registry) error {

	if err := validate.Required("reality_server_addr", "body", m.RealityServerAddr); err != nil {
		return err
	}

	return nil
}

func (m *SecurityConfig) validateRealityServerPort(formats strfmt.Registry) error {

	if err := validate.Required("reality_server_port", "body", m.RealityServerPort); err != nil {
		return err
	}

	return nil
}

func (m *SecurityConfig) validateRealityShortID(formats strfmt.Registry) error {

	if err := validate.Required("reality_short_id", "body", m.RealityShortID); err != nil {
		return err
	}

	return nil
}

func (m *SecurityConfig) validateSni(formats strfmt.Registry) error {

	if err := validate.Required("sni", "body", m.Sni); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this security config based on context it is used
func (m *SecurityConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SecurityConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecurityConfig) UnmarshalBinary(b []byte) error {
	var res SecurityConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
