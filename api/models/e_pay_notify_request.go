// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EPayNotifyRequest EPayNotifyRequest
//
// swagger:model EPayNotifyRequest
type EPayNotifyRequest struct {

	// money
	// Required: true
	Money *string `json:"money"`

	// name
	// Required: true
	Name *string `json:"name"`

	// out trade no
	// Required: true
	OutTradeNo *string `json:"out_trade_no"`

	// param
	// Required: true
	Param *string `json:"param"`

	// pid
	// Required: true
	Pid *int64 `json:"pid"`

	// sign
	// Required: true
	Sign *string `json:"sign"`

	// sign type
	// Required: true
	SignType *string `json:"sign_type"`

	// trade no
	// Required: true
	TradeNo *string `json:"trade_no"`

	// trade status
	// Required: true
	TradeStatus *string `json:"trade_status"`

	// type
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this e pay notify request
func (m *EPayNotifyRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMoney(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutTradeNo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParam(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSign(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTradeNo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTradeStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EPayNotifyRequest) validateMoney(formats strfmt.Registry) error {

	if err := validate.Required("money", "body", m.Money); err != nil {
		return err
	}

	return nil
}

func (m *EPayNotifyRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *EPayNotifyRequest) validateOutTradeNo(formats strfmt.Registry) error {

	if err := validate.Required("out_trade_no", "body", m.OutTradeNo); err != nil {
		return err
	}

	return nil
}

func (m *EPayNotifyRequest) validateParam(formats strfmt.Registry) error {

	if err := validate.Required("param", "body", m.Param); err != nil {
		return err
	}

	return nil
}

func (m *EPayNotifyRequest) validatePid(formats strfmt.Registry) error {

	if err := validate.Required("pid", "body", m.Pid); err != nil {
		return err
	}

	return nil
}

func (m *EPayNotifyRequest) validateSign(formats strfmt.Registry) error {

	if err := validate.Required("sign", "body", m.Sign); err != nil {
		return err
	}

	return nil
}

func (m *EPayNotifyRequest) validateSignType(formats strfmt.Registry) error {

	if err := validate.Required("sign_type", "body", m.SignType); err != nil {
		return err
	}

	return nil
}

func (m *EPayNotifyRequest) validateTradeNo(formats strfmt.Registry) error {

	if err := validate.Required("trade_no", "body", m.TradeNo); err != nil {
		return err
	}

	return nil
}

func (m *EPayNotifyRequest) validateTradeStatus(formats strfmt.Registry) error {

	if err := validate.Required("trade_status", "body", m.TradeStatus); err != nil {
		return err
	}

	return nil
}

func (m *EPayNotifyRequest) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this e pay notify request based on context it is used
func (m *EPayNotifyRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EPayNotifyRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EPayNotifyRequest) UnmarshalBinary(b []byte) error {
	var res EPayNotifyRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
