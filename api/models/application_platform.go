// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ApplicationPlatform ApplicationPlatform
//
// swagger:model ApplicationPlatform
type ApplicationPlatform struct {

	// android
	Android []*ApplicationVersion `json:"android"`

	// harmony
	Harmony []*ApplicationVersion `json:"harmony"`

	// ios
	Ios []*ApplicationVersion `json:"ios"`

	// linux
	Linux []*ApplicationVersion `json:"linux"`

	// macos
	Macos []*ApplicationVersion `json:"macos"`

	// windows
	Windows []*ApplicationVersion `json:"windows"`
}

// Validate validates this application platform
func (m *ApplicationPlatform) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAndroid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHarmony(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIos(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinux(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMacos(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWindows(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationPlatform) validateAndroid(formats strfmt.Registry) error {
	if swag.IsZero(m.Android) { // not required
		return nil
	}

	for i := 0; i < len(m.Android); i++ {
		if swag.IsZero(m.Android[i]) { // not required
			continue
		}

		if m.Android[i] != nil {
			if err := m.Android[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("android" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("android" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ApplicationPlatform) validateHarmony(formats strfmt.Registry) error {
	if swag.IsZero(m.Harmony) { // not required
		return nil
	}

	for i := 0; i < len(m.Harmony); i++ {
		if swag.IsZero(m.Harmony[i]) { // not required
			continue
		}

		if m.Harmony[i] != nil {
			if err := m.Harmony[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("harmony" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("harmony" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ApplicationPlatform) validateIos(formats strfmt.Registry) error {
	if swag.IsZero(m.Ios) { // not required
		return nil
	}

	for i := 0; i < len(m.Ios); i++ {
		if swag.IsZero(m.Ios[i]) { // not required
			continue
		}

		if m.Ios[i] != nil {
			if err := m.Ios[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ios" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ios" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ApplicationPlatform) validateLinux(formats strfmt.Registry) error {
	if swag.IsZero(m.Linux) { // not required
		return nil
	}

	for i := 0; i < len(m.Linux); i++ {
		if swag.IsZero(m.Linux[i]) { // not required
			continue
		}

		if m.Linux[i] != nil {
			if err := m.Linux[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("linux" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("linux" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ApplicationPlatform) validateMacos(formats strfmt.Registry) error {
	if swag.IsZero(m.Macos) { // not required
		return nil
	}

	for i := 0; i < len(m.Macos); i++ {
		if swag.IsZero(m.Macos[i]) { // not required
			continue
		}

		if m.Macos[i] != nil {
			if err := m.Macos[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("macos" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("macos" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ApplicationPlatform) validateWindows(formats strfmt.Registry) error {
	if swag.IsZero(m.Windows) { // not required
		return nil
	}

	for i := 0; i < len(m.Windows); i++ {
		if swag.IsZero(m.Windows[i]) { // not required
			continue
		}

		if m.Windows[i] != nil {
			if err := m.Windows[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("windows" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("windows" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this application platform based on the context it is used
func (m *ApplicationPlatform) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAndroid(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHarmony(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIos(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLinux(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMacos(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWindows(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationPlatform) contextValidateAndroid(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Android); i++ {

		if m.Android[i] != nil {

			if swag.IsZero(m.Android[i]) { // not required
				return nil
			}

			if err := m.Android[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("android" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("android" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ApplicationPlatform) contextValidateHarmony(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Harmony); i++ {

		if m.Harmony[i] != nil {

			if swag.IsZero(m.Harmony[i]) { // not required
				return nil
			}

			if err := m.Harmony[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("harmony" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("harmony" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ApplicationPlatform) contextValidateIos(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Ios); i++ {

		if m.Ios[i] != nil {

			if swag.IsZero(m.Ios[i]) { // not required
				return nil
			}

			if err := m.Ios[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ios" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ios" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ApplicationPlatform) contextValidateLinux(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Linux); i++ {

		if m.Linux[i] != nil {

			if swag.IsZero(m.Linux[i]) { // not required
				return nil
			}

			if err := m.Linux[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("linux" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("linux" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ApplicationPlatform) contextValidateMacos(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Macos); i++ {

		if m.Macos[i] != nil {

			if swag.IsZero(m.Macos[i]) { // not required
				return nil
			}

			if err := m.Macos[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("macos" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("macos" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ApplicationPlatform) contextValidateWindows(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Windows); i++ {

		if m.Windows[i] != nil {

			if swag.IsZero(m.Windows[i]) { // not required
				return nil
			}

			if err := m.Windows[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("windows" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("windows" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApplicationPlatform) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplicationPlatform) UnmarshalBinary(b []byte) error {
	var res ApplicationPlatform
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
