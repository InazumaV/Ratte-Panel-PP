// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PaymentMethodDetail PaymentMethodDetail
//
// swagger:model PaymentMethodDetail
type PaymentMethodDetail struct {

	// config
	// Required: true
	Config interface{} `json:"config"`

	// description
	// Required: true
	Description *string `json:"description"`

	// domain
	// Required: true
	Domain *string `json:"domain"`

	// enable
	// Required: true
	Enable bool `json:"enable"`

	// fee amount
	// Required: true
	FeeAmount *int64 `json:"fee_amount"`

	// fee mode
	// Required: true
	FeeMode *uint32 `json:"fee_mode"`

	// fee percent
	// Required: true
	FeePercent *int64 `json:"fee_percent"`

	// icon
	// Required: true
	Icon *string `json:"icon"`

	// id
	// Required: true
	ID *int64 `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`

	// notify url
	// Required: true
	NotifyURL *string `json:"notify_url"`

	// platform
	// Required: true
	Platform *string `json:"platform"`
}

// Validate validates this payment method detail
func (m *PaymentMethodDetail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeePercent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIcon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotifyURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatform(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentMethodDetail) validateConfig(formats strfmt.Registry) error {

	if m.Config == nil {
		return errors.Required("config", "body", nil)
	}

	return nil
}

func (m *PaymentMethodDetail) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethodDetail) validateDomain(formats strfmt.Registry) error {

	if err := validate.Required("domain", "body", m.Domain); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethodDetail) validateEnable(formats strfmt.Registry) error {

	if err := validate.Required("enable", "body", bool(m.Enable)); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethodDetail) validateFeeAmount(formats strfmt.Registry) error {

	if err := validate.Required("fee_amount", "body", m.FeeAmount); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethodDetail) validateFeeMode(formats strfmt.Registry) error {

	if err := validate.Required("fee_mode", "body", m.FeeMode); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethodDetail) validateFeePercent(formats strfmt.Registry) error {

	if err := validate.Required("fee_percent", "body", m.FeePercent); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethodDetail) validateIcon(formats strfmt.Registry) error {

	if err := validate.Required("icon", "body", m.Icon); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethodDetail) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethodDetail) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethodDetail) validateNotifyURL(formats strfmt.Registry) error {

	if err := validate.Required("notify_url", "body", m.NotifyURL); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethodDetail) validatePlatform(formats strfmt.Registry) error {

	if err := validate.Required("platform", "body", m.Platform); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this payment method detail based on context it is used
func (m *PaymentMethodDetail) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PaymentMethodDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentMethodDetail) UnmarshalBinary(b []byte) error {
	var res PaymentMethodDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
