// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Announcement Announcement
//
// swagger:model Announcement
type Announcement struct {

	// content
	// Required: true
	Content *string `json:"content"`

	// created at
	// Required: true
	CreatedAt *int64 `json:"created_at"`

	// id
	// Required: true
	ID *int64 `json:"id"`

	// pinned
	// Required: true
	Pinned bool `json:"pinned"`

	// popup
	// Required: true
	Popup bool `json:"popup"`

	// show
	// Required: true
	Show bool `json:"show"`

	// title
	// Required: true
	Title *string `json:"title"`

	// updated at
	// Required: true
	UpdatedAt *int64 `json:"updated_at"`
}

// Validate validates this announcement
func (m *Announcement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePinned(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePopup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Announcement) validateContent(formats strfmt.Registry) error {

	if err := validate.Required("content", "body", m.Content); err != nil {
		return err
	}

	return nil
}

func (m *Announcement) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *Announcement) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Announcement) validatePinned(formats strfmt.Registry) error {

	if err := validate.Required("pinned", "body", bool(m.Pinned)); err != nil {
		return err
	}

	return nil
}

func (m *Announcement) validatePopup(formats strfmt.Registry) error {

	if err := validate.Required("popup", "body", bool(m.Popup)); err != nil {
		return err
	}

	return nil
}

func (m *Announcement) validateShow(formats strfmt.Registry) error {

	if err := validate.Required("show", "body", bool(m.Show)); err != nil {
		return err
	}

	return nil
}

func (m *Announcement) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

func (m *Announcement) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this announcement based on context it is used
func (m *Announcement) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Announcement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Announcement) UnmarshalBinary(b []byte) error {
	var res Announcement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
