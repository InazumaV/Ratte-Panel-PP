// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TrafficLog TrafficLog
//
// swagger:model TrafficLog
type TrafficLog struct {

	// download
	// Required: true
	Download *int64 `json:"download"`

	// id
	// Required: true
	ID *int64 `json:"id"`

	// server id
	// Required: true
	ServerID *int64 `json:"server_id"`

	// subscribe id
	// Required: true
	SubscribeID *int64 `json:"subscribe_id"`

	// timestamp
	// Required: true
	Timestamp *int64 `json:"timestamp"`

	// upload
	// Required: true
	Upload *int64 `json:"upload"`

	// user id
	// Required: true
	UserID *int64 `json:"user_id"`
}

// Validate validates this traffic log
func (m *TrafficLog) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDownload(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscribeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpload(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrafficLog) validateDownload(formats strfmt.Registry) error {

	if err := validate.Required("download", "body", m.Download); err != nil {
		return err
	}

	return nil
}

func (m *TrafficLog) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *TrafficLog) validateServerID(formats strfmt.Registry) error {

	if err := validate.Required("server_id", "body", m.ServerID); err != nil {
		return err
	}

	return nil
}

func (m *TrafficLog) validateSubscribeID(formats strfmt.Registry) error {

	if err := validate.Required("subscribe_id", "body", m.SubscribeID); err != nil {
		return err
	}

	return nil
}

func (m *TrafficLog) validateTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	return nil
}

func (m *TrafficLog) validateUpload(formats strfmt.Registry) error {

	if err := validate.Required("upload", "body", m.Upload); err != nil {
		return err
	}

	return nil
}

func (m *TrafficLog) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("user_id", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this traffic log based on context it is used
func (m *TrafficLog) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TrafficLog) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TrafficLog) UnmarshalBinary(b []byte) error {
	var res TrafficLog
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
