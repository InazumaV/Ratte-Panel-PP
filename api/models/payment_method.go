// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PaymentMethod PaymentMethod
//
// swagger:model PaymentMethod
type PaymentMethod struct {

	// description
	// Required: true
	Description *string `json:"description"`

	// fee amount
	// Required: true
	FeeAmount *int64 `json:"fee_amount"`

	// fee mode
	// Required: true
	FeeMode *uint32 `json:"fee_mode"`

	// fee percent
	// Required: true
	FeePercent *int64 `json:"fee_percent"`

	// icon
	// Required: true
	Icon *string `json:"icon"`

	// id
	// Required: true
	ID *int64 `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`

	// platform
	// Required: true
	Platform *string `json:"platform"`
}

// Validate validates this payment method
func (m *PaymentMethod) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeePercent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIcon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatform(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentMethod) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethod) validateFeeAmount(formats strfmt.Registry) error {

	if err := validate.Required("fee_amount", "body", m.FeeAmount); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethod) validateFeeMode(formats strfmt.Registry) error {

	if err := validate.Required("fee_mode", "body", m.FeeMode); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethod) validateFeePercent(formats strfmt.Registry) error {

	if err := validate.Required("fee_percent", "body", m.FeePercent); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethod) validateIcon(formats strfmt.Registry) error {

	if err := validate.Required("icon", "body", m.Icon); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethod) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethod) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *PaymentMethod) validatePlatform(formats strfmt.Registry) error {

	if err := validate.Required("platform", "body", m.Platform); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this payment method based on context it is used
func (m *PaymentMethod) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PaymentMethod) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentMethod) UnmarshalBinary(b []byte) error {
	var res PaymentMethod
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
