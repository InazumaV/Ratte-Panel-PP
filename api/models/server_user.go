// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServerUser ServerUser
//
// swagger:model ServerUser
type ServerUser struct {

	// device limit
	// Required: true
	DeviceLimit *int64 `json:"device_limit"`

	// id
	// Required: true
	ID *int64 `json:"id"`

	// speed limit
	// Required: true
	SpeedLimit *int64 `json:"speed_limit"`

	// uuid
	// Required: true
	UUID *string `json:"uuid"`
}

// Validate validates this server user
func (m *ServerUser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeviceLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpeedLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServerUser) validateDeviceLimit(formats strfmt.Registry) error {

	if err := validate.Required("device_limit", "body", m.DeviceLimit); err != nil {
		return err
	}

	return nil
}

func (m *ServerUser) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ServerUser) validateSpeedLimit(formats strfmt.Registry) error {

	if err := validate.Required("speed_limit", "body", m.SpeedLimit); err != nil {
		return err
	}

	return nil
}

func (m *ServerUser) validateUUID(formats strfmt.Registry) error {

	if err := validate.Required("uuid", "body", m.UUID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this server user based on context it is used
func (m *ServerUser) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ServerUser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServerUser) UnmarshalBinary(b []byte) error {
	var res ServerUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
