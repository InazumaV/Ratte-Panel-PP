// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SiteConfig SiteConfig
//
// swagger:model SiteConfig
type SiteConfig struct {

	// custom data
	// Required: true
	CustomData *string `json:"custom_data"`

	// custom html
	// Required: true
	CustomHTML *string `json:"custom_html"`

	// host
	// Required: true
	Host *string `json:"host"`

	// keywords
	// Required: true
	Keywords *string `json:"keywords"`

	// site desc
	// Required: true
	SiteDesc *string `json:"site_desc"`

	// site logo
	// Required: true
	SiteLogo *string `json:"site_logo"`

	// site name
	// Required: true
	SiteName *string `json:"site_name"`
}

// Validate validates this site config
func (m *SiteConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomHTML(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeywords(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSiteDesc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSiteLogo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSiteName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SiteConfig) validateCustomData(formats strfmt.Registry) error {

	if err := validate.Required("custom_data", "body", m.CustomData); err != nil {
		return err
	}

	return nil
}

func (m *SiteConfig) validateCustomHTML(formats strfmt.Registry) error {

	if err := validate.Required("custom_html", "body", m.CustomHTML); err != nil {
		return err
	}

	return nil
}

func (m *SiteConfig) validateHost(formats strfmt.Registry) error {

	if err := validate.Required("host", "body", m.Host); err != nil {
		return err
	}

	return nil
}

func (m *SiteConfig) validateKeywords(formats strfmt.Registry) error {

	if err := validate.Required("keywords", "body", m.Keywords); err != nil {
		return err
	}

	return nil
}

func (m *SiteConfig) validateSiteDesc(formats strfmt.Registry) error {

	if err := validate.Required("site_desc", "body", m.SiteDesc); err != nil {
		return err
	}

	return nil
}

func (m *SiteConfig) validateSiteLogo(formats strfmt.Registry) error {

	if err := validate.Required("site_logo", "body", m.SiteLogo); err != nil {
		return err
	}

	return nil
}

func (m *SiteConfig) validateSiteName(formats strfmt.Registry) error {

	if err := validate.Required("site_name", "body", m.SiteName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this site config based on context it is used
func (m *SiteConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SiteConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SiteConfig) UnmarshalBinary(b []byte) error {
	var res SiteConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
